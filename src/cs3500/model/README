AnimationModel Design

+----------------------------+
|   AnimationModel Interface |
+----------------------------+
               ^
               |
               |
    +--------------------+
    | AnimationModelImpl |                            +------------------+
    +--------------------+                            |  Command Class   |
                                                      +------------------+
    +-------------------+
    |   Shape Interface |
    +-------------------+
               ^
               |
               |
    +-----------------------+
    | AShape Abstract Class |<-------------------
    +-----------------------+                   |
                ^                               |
                |                               |
                |                               |
    +-----------------------+       +-----------------------+
    |       Oval Class      |       |      Polygon Class    |
    +-----------------------+       +-----------------------+


For our design, we started with an animation model interface and created an AnimationModelImpl
class which implemented the AnimationModel Interface. From there, we created a Shape interface to
represent the shapes of the animation. Then we abstracted the shape class as AShape
which implemented the Shape interface. And we created the Oval and Polygon classes which extended
AShape.

For our Animation model, we store a LinkedHashMap<Command, AShape> of the commands
to the shapes they act upon. The model also stores the current time tick of the animation.
We included a moveShapes() function which uses the current time to update the shapes state if the
command is during the given time. The exact calculations to update each shape's postition, color
and size based on the current time are done in the AShape abstract class in the setPosition(),
setColor() and setSize() classes. We chose not to check overlapping times in the model and instead
we will address that in the controller.

Lastly, we created our Command class which represents a command to change the state of a
Shape in the model. The command class stores the states that shape starts in and the state that
it goes to and the period of time that this transition occurs over.

Our assumptions were that all shapes would be given a unique name so that we can identify all
shapes by their name.

For setAnimationMap, we are assuming that the commands are sent in through the array list already
sorted by shape. While we may have lapses in time, our method for updating the shapes state keeps
everything the same unless it finds a command to execute.


Assignment 7:
For the Model:
The first thing we did was create a KeyFrame class to replace our motions class (which had been
called Command). From there, we had to rearrange all of our methods so that the functionality
would remain the same with the addition of the KeyFrame object.
Additionally, we moved our setAnimation() method into the Animation Builder so it would be called
on initialization of the model and so that the model would be created with the correct
Frames and shapes list, without setAnimation()
having to be called additionally after the model was created. The KeyFrame class was in charge of
storing information for the change for the shape at that one instant (the time given to the
keyFrame). We decided to remove our Motion class altogether because we felt that it would be
repetitive and unnecessary to implement if we could represent the same functionality with the new
KeyFrame class. We also removed the HashMap of motions to shapes and the arraylist of motions.
 We also added the methods for removing, adding, and inserting keyFrames that we
then called in the controller when that was implemented. We also changed the way our moveShapes()
method works (the one that sends the updated shapes to the model). We had to change it because
it relied on motions and expected that every shape would have a motion for every time.
We also decided to change the way we initialize keyframes. No longer do we need to check for
overlaps or time gaps. We also didn't force shapes to have keyframes at any given point. Our model
won't add a shape to be rendered if there is no keyframe associated with the given time.

For the Editor:
We created a new view class called EditorView that implements the IView (our preexisting interface)
and extended JFrame. We added an "editor" option to the view factory so that it can be created in the same way as
the others are. Then, we created an EditorPanel class that extended JPanel and contained all of
the JButtons, JTextfields and JLabels needed to display options for editing the model. EditorView
took in an IDrawingPanel (the animation displayer) and an EditorPanel and placed them on a mainPanel which was added to
the EditorView. The view gives the user the ability to pause and play the animation, restart the
animation, add shapes. delete shapes, insert keyframes, and delete keyframes. The user can also
increase and decrease the speed of the animation. The view also has a way to display helpful feedback
to the user.

For the Controller:
We changed the controller to now include the functionality needed to run the editor in addition
to the existing code that ran the other views for the last assignment. Our controller implemented
ActionListener and overrided ActionPerformed to take in action commands for all of the different
buttons of the view. We added a replay method that restarts the animation ticker. We also added
ability to increase and decrease the speed as well as pause and play the animation. For pausing and
playing, we used a private field isPlaying to hold the state of whether or not the animation
is playing.

